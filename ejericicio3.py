# -*- coding: utf-8 -*-
"""Ejericicio3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MY4JKEhFsRwnMEuJk_cPnIFHEcDzaheu
"""

# -*- coding: utf-8 -*-
"""Ejercicio3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_p1vgdrU7miihNJLEIgg-fy8j2i66WMP
"""

import numpy as np
import matplotlib.pyplot as plt

# Se define la función g(x) utilizada en el método de punto fijo
def g(x):
    return -(np.cos(x))  # Expresión reorganizada para facilitar el análisis gráfico

# Se calcula la derivada de g(x) para evaluar la convergencia
def g_prime(x):
    return (np.sin(x))  # Derivada obtenida de la función g(x)

# Cálculo del error absoluto entre iteraciones
def error_absoluto(x_new, x_old):
    return abs(x_new - x_old)

# Cálculo del error relativo basado en el nuevo valor
def error_relativo(x_new, x_old):
    return abs((x_new - x_old) / x_new)

# Cálculo del error cuadrático entre iteraciones
def error_cuadratico(x_new, x_old):
    return (x_new - x_old)**2

# Implementación del método de punto fijo
def punto_fijo(x0, tol=10e-5, max_iter=100):  # Se ajusta la tolerancia para mejorar la representación gráfica
    iteraciones = []
    errores_abs = []
    errores_rel = []
    errores_cuad = []

    x_old = x0
    for i in range(max_iter):
        x_new = g(x_old)
        e_abs = error_absoluto(x_new, x_old)
        e_rel = error_relativo(x_new, x_old)
        e_cuad = error_cuadratico(x_new, x_old)

        iteraciones.append((i+1, x_new, e_abs, e_rel, e_cuad))
        errores_abs.append(e_abs)
        errores_rel.append(e_rel)
        errores_cuad.append(e_cuad)

        if e_abs < tol:
            break  # Se detiene cuando el error absoluto es menor a la tolerancia

        x_old = x_new

    return iteraciones, errores_abs, errores_rel, errores_cuad

# Valor inicial para el método de punto fijo
x0 = 0.5  # Se establece el punto inicial en 0.5
iteraciones, errores_abs, errores_rel, errores_cuad = punto_fijo(x0)

# Se muestra la tabla con los valores obtenidos en cada iteración
print("Iteración | x_n      | Error absoluto | Error relativo | Error cuadrático")
print("-----------------------------------------------------------------------")
for it in iteraciones:
    print(f"{it[0]:9d} | {it[1]:.6f} | {it[2]:.6e} | {it[3]:.6e} | {it[4]:.6e}")

# Representación gráfica de la función y la convergencia
x_vals = np.linspace(-1, 3, 100)  # Se ajusta el rango de la gráfica para una mejor visualización
y_vals = g(x_vals)

plt.figure(figsize=(8, 5))
plt.plot(x_vals, y_vals, label=r"$g(x) = -\cos(x)$", color="blue")
plt.plot(x_vals, x_vals, linestyle="dashed", color="red", label="y = x")

# Se marcan los puntos obtenidos en cada iteración
x_points = [it[1] for it in iteraciones]
y_points = [g(x) for x in x_points]
plt.scatter(x_points, y_points, color="black", zorder=3)
plt.plot(x_points, y_points, linestyle="dotted", color="black", label="Iteraciones")

plt.xlabel("x")
plt.ylabel("g(x)")
plt.legend()
plt.grid(True)
plt.title("Método de Punto Fijo")
plt.savefig("punto_fijo_convergencia.png")
plt.show()

# Gráfica de la evolución de los errores en función de las iteraciones
plt.figure(figsize=(8, 5))
plt.plot(range(1, len(errores_abs) + 1), errores_abs, marker="o", label="Error absoluto")
plt.plot(range(1, len(errores_rel) + 1), errores_rel, marker="s", label="Error relativo")
plt.plot(range(1, len(errores_cuad) + 1), errores_cuad, marker="^", label="Error cuadrático")

plt.xlabel("Iteración")
plt.ylabel("Error")
plt.yscale("log")
plt.legend()
plt.grid(True)
plt.title("Evolución de los Errores")
plt.savefig("errores_punto_fijo.png")
plt.show()